node -v
npm -v

npm init -y   // package.json 생성

npm install jquery  // jquery 설치

@ npm ?
자바스크립트 라이브러리를 설치하고 관리할 수 있는 패키지 매니저

@ npm을 사용하는 이유와 장점
1 중간에 라이브러리가 필요할 때 script 태그를 넣어서 불러오면
무슨 라이브러리 버젼인지 스크립트 태그안에서 확인해야하고 의존성을 확인해야할 때, 팀웍을 할 떼
package.json 에서 한 번에 정의가 되어준다면 확인하기가 매우 편리하다.

2  라이브러리를 사용하기 위한 cdn 태그를 직접 검색해서 가져오는게 불편함 

npm install gulp
npm uninstall gulp - node_modules, package.json 에서도 삭제된다

npm install gulp --global 
permission 안되면 sudo npm install gulp --global

@ 지역설치와 전역설치 비교
- npm 지역설치
 npm install jquery --save-prod  === npm i jquery (i: install)
 package.json 안에 설치된다. 
 npm install vue --save-dev === npm i vue -D


- npm 전역설치
npm install gulp --global ( === -g)
/usr/local/lib/node_modules 시스템에 설치된다.

package.json에서 
dependencies와 devDependencies
 dep -> npm i jquery
  애플리케이션의 로직과 연결되어있는 라이브러리들 
   ex (react, chart, angular)

  devDep -> npm i vue -D
   개발을 할 때 도움을 주는 개발보조 라이브러리 
   ex 웹팩, sass js-compression

@ 개발용 라이브러리와 배포용 라이브러리 구분하기
 디펜던시에 들어간 라이브러리들은 build를 할 때 코드안에 포함되고 데브디펜던시에 있는 라이브러리는
 빌드가 되지않는다. 
 데브 디펜던시를 구분하지 않아서 디펜던시에 필요없는 라이브러리들이 들어가면 빌드할 때 
 시간이 오래걸리게 된다.

@ 웹팩 소개?
 모듈 번들러 ( html, css, js 등)을 모두 각각의 모듈로 보고 이를 조합해서 하나의 결과물로
 만드는 도구 / 번들링 === 빌드 === 변환

모듈 번들링 ?
웹 application을 구성하는 몇십, 몇백개의 자원들을 하나의 파일로 병합 및 압축하는 것
